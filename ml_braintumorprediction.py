# -*- coding: utf-8 -*-
"""ML_BrainTumorPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHJKsiOPlZqisTKTj5mdsiJGpNjGbNPk
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd 
pd.set_option('display.width',1000)
pd.set_option('display.max_column',40)
pd.set_option('precision',2)

import io
data=pd.read_csv(
    io.BytesIO(uploaded['BrainTumorData.csv']),
    index_col=False)

print( data )

print("data.shape=",data.shape,"\n\n")
# 593 x 33

print(data.describe())

data['diagnosis']=data['diagnosis'].apply(lambda x: '1' if x == 'M' else '0')  # ans will be 1 or 0 in diagnosis column
data=data.set_index('id')        # making id as row heading

del data['Unnamed: 32']

print("After Deletion of 'Unnamed: 32' column\n",data)

import warnings
warnings.filterwarnings(action="ignore")

print(data.groupby('diagnosis').size())      # total 0 nd 1

import matplotlib.pyplot as plt
from matplotlib import cm as cm     #color map

#from sklearn.metrics import classification_report
#from sklearn.metrics import confusin_matrix
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

data.plot(kind='box', subplots=True,
         layout=(5,7), sharex=False, legend=False,
         fontsize=1)

plt.show

fig=plt.figure()
axl=fig.add_subplot(111)
cmap=cm.get_cmap('jet',30)
cax=axl.imshow(data.corr(),
              interpolation="none",cmap=cmap)
axl.grid(True)
plt.title('Cancer Tumor Attributes Correlation')

# Add colorbar, make sure to specify tick
# locations to match desired ticklabels

fig.colorbar(cax, ticks=[.75,.8,.85,.90,1])
plt.show()

Y=data['diagnosis'].values
X=data.drop('diagnosis', axis=1).values      # except diagnosis

from sklearn.linear_model import LogisticRegression

model=LogisticRegression()

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.33)
model.fit(X_train,Y_train)

predictdY=model.predict(X_test)
print("prediction=",predictdY)

result=model.score(X_test,Y_test)

print("Accuracy=",(result*100),"%%")

model=LogisticRegression()
num_folds=10
kfold=KFold(n_splits=num_folds)
results=cross_val_score(model,X,Y,cv=kfold)
print("KFold Accuracy=",results.mean())

res=list(zip(Y_test,predictdY))

print(res)